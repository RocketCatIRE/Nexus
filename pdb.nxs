{"name":"pdb","enabled":true,"description":"A database for props","type":"group","id":1,"items":[{"type":"function","name":"onGMCP","enabled":true,"id":2,"code":"//Enter the function here\n//Char.Items.List { \"location\": \"room\", \"items\": [ { \"id\": \"2913\", \"name\": \"a broad and heavy bench\" }, { \"id\": \"2914\", \"name\": \"a massive syncrete post\" }, { \"id\": \"2915\", \"name\": \"a recessed doorway\" }, { \"id\": \"2916\", \"name\": \"a broad and heavy bench\" }, { \"id\": \"8870\", \"name\": \"a rakish Tukkav speeder pilot\", \"attrib\": \"mx\" }, { \"id\": \"8871\", \"name\": \"a laconic Shen speeder pilot\", \"attrib\": \"mx\" }, { \"id\": \"58309\", \"name\": \"a recessed doorway\" } ] }\n\nvar m = args.gmcp_method;\nvar r = args.gmcp_args;\n\nif (!(m == \"Char.Items.List\")) return;\nif (!('items' in r)) return;\npdb.items = r['items'];\nfor (var i = 0, noe = pdb.items.length; i < noe; i++) {\n\tif ('attrib' in pdb.items[i]) continue;\n    var found = false;\n    if (pdb.items[i]['name'] in pdb.props) found = true;\n    if (found) continue;\n    pdb.props[pdb.items[i].name] = {'id':Object.keys(pdb.props).length+1,'cover':null,'climb':null, 'tip':null, 'tipCover':null, 'rightedClimb':null,};\n\tpdb.hardSave();\n    if (pdb.reporting) pdb.report('Loaded ' + pdb.items[i].name + ' to pdb');\n}\nif (pdb.reporting) {\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n        if (pdb.items[i]['name'] in pdb.props) {\n            pdb.display(pdb.items[i]['name']);\n        }\n    }\n}"},{"type":"function","name":"onLoad","enabled":true,"id":3,"code":"pdb = {};\npdb.props = get_variable('pdb.props') || {};\npdb.reporting = true;\npdb.climbTest = false;\npdb.climbingProp = '';\npdb.coverTest = false;\npdb.tipTest = false;\npdb.tippingProp = '';\npdb.tipCoverTest = false;\npdb.tipCoverProp = '';\npdb.rightingAttempt = null;\npdb.resetTests = function() {\n    \n    pdb.climbTest = false;\n    pdb.climbingProp = '';\n    pdb.coverTest = false;\n    pdb.tipTest = false;\n    pdb.tippingProp = '';\n    pdb.tipCoverTest = false;\n    pdb.tipCoverProp = '';\n}\n\n\npdb.setTipCover = function (prop, tipCover) {\n    if (prop in pdb.props) {\n        pdb.props[prop].tipCover = tipCover\n        if (pdb.reporting) pdb.report(prop + ' flipped cover set to ' + pdb.coemph(pdb.props[prop].tipCover));\n        pdb.hardSave();\n    } else {\n        pdb.error('No prop \"'+prop+ '\" found in pdb');\n    }\n}\n\npdb.setCover = function (prop, cover) {\n\tif (prop in pdb.props) {\n        if (pdb.props[prop].tip == null) {\n            pdb.error('Test \"'+prop+ '\" for flip first');\n            return;\n        }\n        if (pdb.props[prop].tipCover == null) {\n            pdb.error('Test \"'+prop+ '\" for flip cover first');\n            return;\n        }\n        pdb.props[prop].cover = cover;\n        if (pdb.reporting) pdb.report(prop + ' cover set to ' + pdb.coemph(pdb.props[prop].cover));\n            \n        pdb.hardSave();\n    } else {\n        pdb.error('No prop \"'+prop+ '\" found in pdb');\n    }\n}\n\npdb.setClimb = function(prop, climb) {\n\tif (prop in pdb.props) {\n        pdb.props[prop].climb = climb;\n        if (pdb.reporting) pdb.report(prop + ' climb set to ' + pdb.coemph(pdb.props[prop].climb));\n        pdb.hardSave();\n    } else {\n        pdb.error('No prop \"'+prop+ '\" found in pdb');\n    }\n}\n\npdb.setRightedClimb = function(prop, climb) {\n\tif (prop in pdb.props) {\n        pdb.props[prop].rightedClimb = climb;\n        if (pdb.reporting) pdb.report(prop + ' righted climb set to ' + pdb.coemph(pdb.props[prop].rightedClimb));\n        pdb.hardSave();\n    } else {\n        pdb.error('No prop \"'+prop+ '\" found in pdb');\n    }\n}\n\npdb.setTip = function(prop, tip) {\n\tif (prop in pdb.props) {\n        pdb.props[prop].tip = tip;\n        if (pdb.reporting) pdb.report(prop + ' flip set to ' + pdb.coemph(pdb.props[prop].tip));\n        if (!tip) {\n            pdb.props[prop].tipCover = false;\n            if (pdb.reporting) pdb.report(prop + ' tipCover set to ' + pdb.coemph(pdb.props[prop].tipCover));\n        }\n        pdb.hardSave();\n    } else {\n        pdb.error('No prop \"'+prop+ '\" found in pdb');\n    }\n}\npdb.display = function(prop) {\n\tif (prop in pdb.props) {\n        var coverReport = ''\n        var climbReport = ''\n        var tipReport = ''\n        var tipCoverReport = ''\n        var rightedClimbReport = ''\n        if (pdb.props[prop].climb == null) {\n            climbReport = pdb.coerr(pdb.props[prop].climb)\n        } else if (pdb.props[prop].climb){\n            climbReport = pdb.coemph(pdb.props[prop].climb)\n        } else {\n            climbReport = pdb.cofalse(pdb.props[prop].climb)\n        }\n        if (pdb.props[prop].cover == null) {\n            coverReport = pdb.coerr(pdb.props[prop].cover)\n        } else if (pdb.props[prop].cover){\n            coverReport = pdb.coemph(pdb.props[prop].cover)\n        } else {\n            coverReport = pdb.cofalse(pdb.props[prop].cover)\n        }\n        if (pdb.props[prop].tip == null) {\n            tipReport = pdb.coerr(pdb.props[prop].tip)\n        } else if (pdb.props[prop].tip){\n            tipReport = pdb.coemph(pdb.props[prop].tip)\n        } else {\n            tipReport = pdb.cofalse(pdb.props[prop].tip)\n        }\n        if (pdb.props[prop].tipCover == null) {\n            tipCoverReport = pdb.coerr(pdb.props[prop].tipCover)\n        } else if (pdb.props[prop].tipCover){\n            tipCoverReport = pdb.coemph(pdb.props[prop].tipCover)\n        } else {\n            tipCoverReport = pdb.cofalse(pdb.props[prop].tipCover)\n        }\n        if (pdb.props[prop].rightedClimb == null) {\n            rightedClimbReport = pdb.coerr(pdb.props[prop].rightedClimb)\n        } else if (pdb.props[prop].rightedClimb){\n            rightedClimbReport = pdb.coemph(pdb.props[prop].rightedClimb)\n        } else {\n            rightedClimbReport = pdb.cofalse(pdb.props[prop].rightedClimb)\n        }\n    \tpdb.report('ID# '+pdb.props[prop].id+': '+pdb.coprop(prop) + ' ::::: cover: ' + coverReport + ' climb: ' + climbReport + ' flip: ' +tipReport + ' flipCover: ' + tipCoverReport + ' rightedClimb: '+rightedClimbReport )\n    } else {\n        pdb.error('No prop \"'+prop+ '\" found in pdb');\n    }\n}\n\npdb.displayHere = function() {\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n        if (pdb.items[i]['name'] in pdb.props) {\n            pdb.display(pdb.items[i]['name'])\n        }\n    }\n}\npdb.displayAll = function() {\n    for (key in pdb.props) {\n        pdb.display(key);\n    }\n}\n\npdb.hardSave = function() {\n\tset_variable('pdb.props', pdb.props);\n    if (pdb.reporting) pdb.report('pdb saved');\n}\npdb.hardDelete = function() {\n    pdb.report('Deleting pdb. Old pdb can be accessed in Nexus var pdb.backup_db')\n    pdb.hardSave();\n    set_variable('pdb.backup_db', pdb.props);\n    delete_variable('pdb.props');\n    send_command('onLoad');\n}\npdb.reloadBackup = function() {\n    if (typeof get_variable('pdb.backup_db') == 'undefined') {\n        pdb.error('No pdb.backup_db found.')\n        return;\n    }\n    pdb.report('Reloading backup db from pdb.backup_db')\n    set_variable('pdb.props', 'pdb.backup_db');\n    pdb.props = get_variable('pdb.props')\n    pdb.hardSave();\n    send_command('onLoad');\n}\npdb.testNext = function() {\n    //display_notice('hi')\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n        var name = pdb.items[i]['name'];\n        //pdb.report('Testing ' + name);\n        if (name in pdb.props) {\n            if (pdb.props[name].tip == null) {\n                send_command('fl '+pdb.items[i].id);\n                return true;\n            }\n            if (pdb.props[name].climb == null) {\n                send_command('cl '+pdb.items[i].id);\n                return true;\n            }\n        }\n    }\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n        var name = pdb.items[i]['name'];\n        //pdb.report('Testing ' + name);\n        if (name in pdb.props) {\n            if (pdb.props[name].tip && (pdb.props[name].tipCover == null)) {\n                send_command('cvf '+pdb.items[i].id)\n                return true;\n            } else if (pdb.props[name].tip && (typeof pdb.props[name].righted == 'undefined')) {\n                pdb.props[name].righted = false;\n                send_command('right ' + pdb.items[i].id);\n                return true;\n            } else if (pdb.props[name].tip && !pdb.props[name].righted) {\n                send_command('right ' + pdb.items[i].id);\n                return true;\n                \n            }else if (pdb.props[name].cover == null) {\n                pdb.rightingAttempt = null;\n                send_command('co '+pdb.items[i].id)\n                return true;\n            }\n        }\n    }\n    pdb.report('Nothing here to test');\n    return false;\n}\npdb.options = {\n    tag : '&Lang;   pdb   &Rang;',\n    tagc : 'rgb(66, 244, 89)',\n    msgc : 'rgb(224, 255, 241)',\n    emphc: 'rgb(0, 198, 16)',\n    falc: 'rgb(163, 163, 163)',\n    errc: 'rgb(255, 103, 76)',\n    proc: 'rgb(144, 249, 171)',\n};\n\n\n\n    \npdb.report = function(msg) { pdb.owWrite('#output_main', '<div style=\"color: ' + pdb.options.tagc + ';\">' + pdb.options.tag + ': <span style=\"color: ' + pdb.options.msgc + ';\">' + msg + '</span></div>') };\npdb.error = function(msg) {pdb.report(pdb.coerr(msg));}\npdb.verb = function(msg) {if(pdb.verbose){pdb.report(msg);}},\npdb.coemph = function(str) {return '<span style=\"color:'+pdb.options.emphc+';\"/>'+str+'</span>';}\npdb.coerr = function(str) {return '<span style=\"color:'+pdb.options.errc+';\"/>'+str+'</span>';}\npdb.cofalse = function(str) {return '<span style=\"color:'+pdb.options.falc+';\"/>'+str+'</span>';}\npdb.coprop = function(str) {return '<span style=\"color:'+pdb.options.proc+';\"/>'+str+'</span>';}\n\npdb.owWrite = function(selector, text) {\n    if (text.trim() == \"\") return;\n\n    // doing these updates asynchronously to minimize reflows when under heavy load\n    window.requestAnimationFrame(function() {\n        var hooks = $.cssHooks;\n        $.cssHooks = {};\n\n        var output = client.document.querySelectorAll(selector + ' .output')[0];\n        var newel = document.createElement('div');\n        newel.innerHTML = text;\n        newel.className = 'line';\n        newel.id = 'msg' + num_msgs;\n        output.appendChild(newel);\n        if(client.logging){append_to_log(newel.innerHTML);}\n\n        var scrollback = client.document.querySelectorAll(selector + ' .output_scrollback')[0];\n        newel = document.createElement('div');\n        newel.className = 'line';\n        newel.innerHTML = text;\n        newel.id = 'sb_msg' + num_msgs;\n        scrollback.appendChild(newel);\n\n        trim_ow(selector);\n\n        num_msgs++;\n        scrollback_num_msgs++;\n\n        if (selector === '#output_main') {\n           if (no_prompts || gag_prompts) {\n               var el = client.document.querySelectorAll('#output_main .prompt');\n               for (var i = 0; i < el.length; i++) el[i].style.display = 'none';\n               // last prompt shown?\n               if ((!no_prompts) && el.length > 0)\n                   el[el.length - 1].style.display = 'block';\n           }\n           if (show_timestamps) {\n               var el = client.document.querySelectorAll('#output_main .output #msg'+(num_msgs-1)+' .timestamp');\n               for (var i = 0; i < el.length; i++) el[i].classList.remove('no_out');\n           }\n           if (show_scroll_timestamps) {\n               var el = client.document.querySelectorAll('#output_main .output_scrollback #sb_msg'+(num_msgs-1)+' .timestamp');\n               for (var i = 0; i < el.length; i++) el[i].classList.remove('no_out');\n           }\n        }\n\n        output.scrollTop = output.scrollHeight;\n\n        $.cssHooks = hooks;\n    });\n\n};\n\npdb.report('Prop database loaded. Type \"pdb\" for options.');\n    "},{"type":"trigger","name":"","enabled":true,"id":4,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You cannot take cover behind (.+)\\.","actions":[{"action":"script","script":"if (pdb.coverTest) { \n    pdb.setCover(args[1], false);\n    pdb.coverTest = false;\n}\n\nif (pdb.tipCoverTest) {\n    pdb.setTipCover(args[1], false);\n    pdb.tipCoverTest = false;\n}\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":5,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You vault over (.+) and take cover behind it\\.","actions":[{"action":"script","script":"if (pdb.coverTest) { \n\tpdb.setCover(args[1], true)\n    pdb.coverTest = false;\n}\n\nif (pdb.tipCoverTest) {\n    pdb.setTipCover(args[1], true);\n    pdb.tipCoverTest = false;\n}\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":7,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You take cover behind (.+).","actions":[{"action":"script","script":"if (pdb.coverTest) { \npdb.setCover(args[1], true)\n    pdb.coverTest = false;\n}\nif (pdb.tipCoverTest) {\n    pdb.setTipCover(args[1], true);\n    pdb.tipCoverTest = false;\n}\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":9,"matching":"regexp","whole_words":true,"case_sensitive":false,"text":"You dive behind (.+)\\.","actions":[{"action":"script","script":"if (pdb.coverTest) { \n\tpdb.setCover(args[1], true)\n    pdb.coverTest = false;\n}\nif (pdb.tipCoverTest) {\n    pdb.setTipCover(args[1], true);\n    pdb.tipCoverTest = false;\n}\npdb.resetTests();"}]},{"type":"alias","name":"","enabled":true,"id":6,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.displayAll();"}],"text":"pdb all"},{"type":"alias","name":"","enabled":true,"id":12,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.displayHere();"}],"text":"pdb here"},{"type":"alias","name":"","enabled":true,"id":10,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\npdb.climbTest = true;\npdb.climbingProp = args[1];\npdb.report('Testing whether we can climb ' + pdb.climbingProp);\nsend_command('climb '+ pdb.climbingProp);"}],"text":"cl (.+)"},{"type":"trigger","name":"","enabled":true,"id":11,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"That isn't something that may be climbed.","actions":[{"action":"script","script":"//Enter the script here\nif (pdb.climbTest) {\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n\t\tif (pdb.items[i].id == pdb.climbingProp) {\n            pdb.setClimb(pdb.items[i]['name'], false);\n            pdb.props[pdb.items[i]['name']].rightedClimb = false;\n        }\n    }\n\tpdb.climbTest = false;\n    pdb.climbingProp = '';\n}\n\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":13,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You quickly climb up (.+)\\.","actions":[{"action":"script","script":"//Enter the script here\nif (pdb.climbTest) {\n    pdb.setClimb(args[1], true);\n\tpdb.climbTest = false;\n    pdb.props[args[1]].rightedClimb = false;\n    pdb.climbingProp = '';\n}\n\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":31,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"That needs to be RIGHTed before it can be climbed.","actions":[{"action":"script","script":"//Enter the script here\nif (pdb.climbTest) {\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n\t\tif (pdb.items[i].id == pdb.climbingProp) {\n            pdb.setRightedClimb(pdb.items[i]['name'], true);\n            pdb.props[pdb.items[i]['name']].climb = false;\n        }\n    }\n\tpdb.climbTest = false;\n    pdb.climbingProp = '';\n}\n\npdb.resetTests();"}]},{"type":"alias","name":"","enabled":true,"id":17,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\npdb.tipTest = true;\npdb.tippingProp = args[1];\npdb.report('Testing whether we can flip ' + pdb.tippingProp);\nsend_command('flip '+ pdb.tippingProp);"}],"text":"fl (.+)"},{"type":"alias","name":"","enabled":true,"id":14,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.reporting = pdb.reporting ? false : true\npdb.report('pdb report set to: '+pdb.reporting);"}],"text":"pdb report"},{"type":"alias","name":"","enabled":true,"id":15,"matching":"exact","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.report(pdb.coemph('Welcome to Prop Database. Valid commands are:'))\npdb.report(pdb.cofalse('============================================'))\npdb.report(pdb.cofalse('PDB ALL')+': Display the entire prop database.')\npdb.report(pdb.cofalse('PDB HERE')+': Display the props in the location')\npdb.report(pdb.cofalse('PDB REPORT')+': Toggle system reporting, useful when gathering data, off by default.')\npdb.report(pdb.cofalse('PDB DELETE')+': Delete the existing prop database. The deleted database will be saved as the backup.')\npdb.report(pdb.cofalse('PDB RELOADBACKUP')+': Reload the backup db, removing the current one.')\npdb.report(pdb.cofalse('PDTA')+': Test all untested props in the room.');\npdb.report(pdb.cofalse('PDB SET &lt;cover|climb|flip|flipCover&gt; &lt;true|false|null&gt; &lt;pdb_id&gt;')+': Manually set a value. Use the id# shown in PDB ALL/PDB HERE.')\npdb.report(pdb.cofalse('Note: do not use the aliases. Let PDTA do it for you so things are done in the right order! Fully test the props in the room before carrying on to the next room to avoid errors.'));"}],"text":"pdb"},{"type":"alias","name":"","enabled":true,"id":16,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[]},{"type":"trigger","name":"","enabled":true,"id":18,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You flip (.+) on its side.","actions":[{"action":"script","script":"//Enter the script here\nif (pdb.tipTest) {\n    pdb.setTip(args[1], true);\n\tpdb.tipTest = false;\n    pdb.tippingProp = '';\n}\npdb.resetTests();\n"}]},{"type":"trigger","name":"","enabled":true,"id":19,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You set (.+) upright once more\\.","actions":[{"action":"script","script":"//Enter the script here\n\nif (pdb.tipTest) {\n    pdb.setTip(args[1], true);\n\tpdb.tipTest = false;\n    pdb.tippingProp = '';\n}\npdb.props[args[1]].righted = true;\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":27,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"That's already flipped over.","actions":[{"action":"script","script":"if (pdb.tipTest) {\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n\t\tif (pdb.items[i].id == pdb.tippingProp) {\n            pdb.setTip(pdb.items[i]['name'], true);\n        }\n    }\n\tpdb.tipTest = false;\n    pdb.tippingProp = '';\n}\n\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":20,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"That's not something that may be flipped.","actions":[{"action":"script","script":"//Enter the script here\nif (pdb.tipTest) {\n    for (var i = 0, noe = pdb.items.length; i < noe; i++) {\n\t\tif (pdb.items[i].id == pdb.tippingProp) {\n            pdb.setTip(pdb.items[i]['name'], false);\n        }\n    }\n\tpdb.tipTest = false;\n    pdb.tippingProp = '';\n}\n\npdb.resetTests();"}]},{"type":"alias","name":"","enabled":true,"id":21,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\npdb.coverTest = true;\npdb.report('Testing whether we can cover with' + args[1]);\nsend_command('cover '+ args[1]);"}],"text":"co (.+)"},{"type":"alias","name":"","enabled":true,"id":29,"matching":"regexp","whole_words":true,"case_sensitive":false,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\npdb.tipCoverTest = true;\npdb.report('Testing whether we can cover with ' + args[1] + ' flipped.');\nsend_command('cover '+ args[1]);"}],"text":"cvf (.+)"},{"type":"alias","name":"","enabled":true,"id":22,"matching":"regexp","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"//Enter the script here\nvar key = args[1]\nvar val = args[2]\nvar id = args[3]\nfor (var prop in pdb.props) {\n    if (pdb.props[prop].id == id) {\n        pdb.props[prop][key] = val;\n    \tpdb.report('Set ' + key + ' = ' + val + ' for ' + prop);\n        pdb.hardSave();\n        return true;\n    }\n}\npdb.error('No prop id found in pdb \"' + id '\"');\nreturn false;\n\n"}],"text":"^pdb set (cover|climb|flip|flipCover) (true|false|null) (.+)$"},{"type":"alias","name":"","enabled":true,"id":23,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.testNext();"}],"text":"pdt"},{"type":"trigger","name":"","enabled":true,"id":24,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You are already taking cover behind .+\\. You need to LEAVE COVER before you can take cover elsewhere\\.","actions":[{"action":"command","command":"leave cover"},{"action":"script","script":"\npdb.resetTests();"}]},{"type":"alias","name":"","enabled":true,"id":25,"matching":"exact","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"var check = function(){\n\tpdb.resetTests();\n    if(pdb.testNext()){\n        setTimeout(check, 1000);\n    }\n}\n\npdb.resetTests();\ncheck();"}],"text":"pdta"},{"type":"trigger","name":"","enabled":true,"id":26,"matching":"exact","whole_words":true,"case_sensitive":true,"text":"You need to CLIMB DOWN before you can move.","actions":[{"action":"command","command":"climb down"},{"action":"script","script":"\npdb.resetTests();"}]},{"type":"trigger","name":"","enabled":true,"id":33,"matching":"regexp","whole_words":true,"case_sensitive":true,"text":"You must climb down from .+","actions":[{"action":"command","command":"climb down"},{"action":"script","script":"\npdb.resetTests();"}]},{"type":"alias","name":"","enabled":true,"id":28,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.hardDelete();"}],"text":"pdb delete"},{"type":"alias","name":"","enabled":true,"id":30,"matching":"begins","whole_words":true,"case_sensitive":true,"prefix_suffix":true,"actions":[{"action":"script","script":"pdb.reloadBackup();"}],"text":"pdb reloadbackup"},{"type":"trigger","name":"","enabled":true,"id":32,"matching":"substring","whole_words":true,"case_sensitive":true,"text":"That needs no righting.","actions":[{"action":"script","script":"//Enter the script here\nif (pdb.rightingAttempt == false) {\n\tpdb.rightingAttempt = true;\n}"}]}]}
